import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;


class MinesweeperGame extends JFrame {

    private String SIGN_OF_FLAG = "F";                                                                                  // Обозначение флага
    private String PROGRAM_NAME = "MinesweeperGame";                                                                    // Название программы в заголовке
    private int FIELD_DX = 17;
    private int FIELD_DY = 55;
    private int START_LOCATION = 400;
    private int MOUSE_BUTTON_LEFT = 1;                                                                                  // Для mouseListener
    private int MOUSE_BUTTON_RIGHT = 3;
    private int BLOCK_SIZE = 30;                                                                                        // Размер блока
    private int FIELD_SIZE = 9;                                                                                         // В блоках
    private int NUMBER_OF_MINES = 10;                                                                                   // Число мин
    private int[] COLOR_OF_NUMBERS = {0x0000FF, 0x008000, 0xFF0000, 0x800000, 0x0};                                     // Массив с цветами для каждой цифры
    Cell[][] field = new Cell[FIELD_SIZE][FIELD_SIZE];                                                                  // Поле
    Random random = new Random();
    int countOpenedCells;                                                                                               // Счетчик открытых ячеек
    boolean bangMine;                                                                                                   // bangMine - true => нажали на бомбу
    int bangMineX, bangMineY;                                                                                           // запоминаем координаты взрыва
    boolean Won;                                                                                                        // youWon - становится true, когда игра заканчивается

    public static void main(String[] args) {
        new MinesweeperGame();
    }

    MinesweeperGame() {
        setTitle(PROGRAM_NAME);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setBounds(START_LOCATION + 300, START_LOCATION, FIELD_SIZE * BLOCK_SIZE + FIELD_DX, FIELD_SIZE * BLOCK_SIZE + FIELD_DY);
        setResizable(true);
        final Canvas canvas = new Canvas();
        canvas.setBackground(Color.white);
        canvas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                int x = e.getX() / BLOCK_SIZE;
                int y = e.getY() / BLOCK_SIZE;
                if (!bangMine && !Won) {
                    if (e.getButton() == MOUSE_BUTTON_LEFT)                                                             // Действия, если нажал на лелвую кнопку мыши
                        if (field[y][x].isNotOpen()) {
                            field[y][x].open();                                                                         // Я пока не придумал, как сделать так, чтобы открывались пустые рядом клетки
                            Won = countOpenedCells == FIELD_SIZE * FIELD_SIZE - NUMBER_OF_MINES;
                            if (bangMine) {
                                bangMineX = x;
                                bangMineY = y;
                            }
                        }
                    if (e.getButton() == MOUSE_BUTTON_RIGHT)
                        field[y][x].changeFlag();                                                                       // Действия, если нажал на правую кнопку мыши
                    canvas.repaint();
                }
            }
        });
        add(BorderLayout.CENTER, canvas);
        setVisible(true);
        initializeField();
    }

    void createField(){                                                                                                 // Описание метода для заполнения поля
        for (int x = 0; x < FIELD_SIZE; x++) {
            for (int y = 0; y < FIELD_SIZE; y++)
                field[y][x] = new Cell();
        }
    }

    void fillMines(int x, int y, int countMines){
        while (countMines < NUMBER_OF_MINES) {
            do {
                x = random.nextInt(FIELD_SIZE);
                y = random.nextInt(FIELD_SIZE);
            } while (field[y][x].isMined());
            field[y][x].toMine();
            countMines++;
        }
    }

    void bombsNearby(){
        for (int x = 0; x < FIELD_SIZE; x++)
            for (int y = 0; y < FIELD_SIZE; y++)
                if (!field[y][x].isMined()) {
                    int count = 0;
                    for (int overX = -1; overX < 2; overX++)
                        for (int overY = -1; overY < 2; overY++) {
                            int nX = x + overX;
                            int nY = y + overY;
                            if (nX < 0 || nY < 0 || nX > FIELD_SIZE - 1 || nY > FIELD_SIZE - 1) {
                                nX = x;
                                nY = y;
                            }
                            count += (field[nY][nX].isMined()) ? 1 : 0;
                        }
                    field[y][x].setCountBomb(count);
                }
    }

    void initializeField() {                                                                                            // Создание игрового поля
        int x = 0, y = 0, countMines = 0;
        createField();                                                                                                  // Заполняем поле field ячейками
        fillMines(x, y,countMines);                                                                                     // Заполняем радномно бомбами
        bombsNearby();                                                                                                  // Заполняем открытые клеточки цифрами - число бомб рядом с открытой клеточкой
    }
    class Cell {                                                                                                        // Представляет собой шаблон ячейки на поле
        private int countBombNear;
        private boolean isOpen, isMine, isFlag;

        void open() {
            isOpen = true;
            bangMine = isMine;
            if (!isMine) countOpenedCells++;
        }

        void toMine() { isMine = true; }

        void setCountBomb(int count) { countBombNear = count; }

        boolean isNotOpen() { return !isOpen; }

        boolean isMined() { return isMine; }

        void changeFlag() { isFlag = !isFlag; }

        void paintBomb(Graphics g, int x, int y, Color color) {                                                         // Метод для рисования бомбы
            g.setColor(color);
            g.fillRect(x*BLOCK_SIZE + 7, y*BLOCK_SIZE + 10, 18, 10);
            g.fillRect(x*BLOCK_SIZE + 11, y*BLOCK_SIZE + 6, 10, 18);
            g.fillRect(x*BLOCK_SIZE + 9, y*BLOCK_SIZE + 8, 14, 14);
            g.setColor(Color.white);
            g.fillRect(x*BLOCK_SIZE + 11, y*BLOCK_SIZE + 10, 4, 4);
        }

        void paintString(Graphics g, String str, int x, int y, Color color) {
            g.setColor(color);
            g.setFont(new Font("", Font.BOLD, BLOCK_SIZE));
            g.drawString(str, x*BLOCK_SIZE + 8, y*BLOCK_SIZE + 26);
        }

        void paint(Graphics g, int x, int y) {
            g.setColor(Color.lightGray);
            g.drawRect(x*BLOCK_SIZE, y*BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            if (!isOpen) {
                if ((bangMine || Won) && isMine) paintBomb(g, x, y, Color.black);
                else {
                    g.setColor(Color.lightGray);
                    g.fill3DRect(x*BLOCK_SIZE, y*BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE, true);
                    if (isFlag) paintString(g, SIGN_OF_FLAG, x, y, Color.red);
                }
            } else
            if (isMine) paintBomb(g, x, y, bangMine? Color.red : Color.black);
            else
            if (countBombNear > 0)
                paintString(g, Integer.toString(countBombNear), x, y, new Color(COLOR_OF_NUMBERS[countBombNear - 1]));
        }
    }

    class Canvas extends JPanel {
        @Override
        public void paint(Graphics g) {
            super.paint(g);
            for (int x = 0; x < FIELD_SIZE; x++)
                for (int y = 0; y < FIELD_SIZE; y++) field[y][x].paint(g, x, y);
        }
    }
}
